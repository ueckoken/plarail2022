// source: block.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.BlockState', null, global);
goog.exportSymbol('proto.BlockState.BlockId', null, global);
goog.exportSymbol('proto.BlockState.State', null, global);
goog.exportSymbol('proto.BlockStateList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BlockStateList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BlockStateList.repeatedFields_, null);
};
goog.inherits(proto.BlockStateList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BlockStateList.displayName = 'proto.BlockStateList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BlockState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BlockState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BlockState.displayName = 'proto.BlockState';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BlockStateList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BlockStateList.prototype.toObject = function(opt_includeInstance) {
  return proto.BlockStateList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BlockStateList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockStateList.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockStatesList: jspb.Message.toObjectList(msg.getBlockStatesList(),
    proto.BlockState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BlockStateList}
 */
proto.BlockStateList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BlockStateList;
  return proto.BlockStateList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BlockStateList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BlockStateList}
 */
proto.BlockStateList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.BlockState;
      reader.readMessage(value,proto.BlockState.deserializeBinaryFromReader);
      msg.addBlockStates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BlockStateList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BlockStateList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BlockStateList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockStateList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockStatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.BlockState.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BlockState block_states = 1;
 * @return {!Array<!proto.BlockState>}
 */
proto.BlockStateList.prototype.getBlockStatesList = function() {
  return /** @type{!Array<!proto.BlockState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BlockState, 1));
};


/**
 * @param {!Array<!proto.BlockState>} value
 * @return {!proto.BlockStateList} returns this
*/
proto.BlockStateList.prototype.setBlockStatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.BlockState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BlockState}
 */
proto.BlockStateList.prototype.addBlockStates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.BlockState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.BlockStateList} returns this
 */
proto.BlockStateList.prototype.clearBlockStatesList = function() {
  return this.setBlockStatesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BlockState.prototype.toObject = function(opt_includeInstance) {
  return proto.BlockState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BlockState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockState.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BlockState}
 */
proto.BlockState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BlockState;
  return proto.BlockState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BlockState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BlockState}
 */
proto.BlockState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {!proto.BlockState.BlockId} */ (reader.readEnum());
      msg.setBlockid(value);
      break;
    case 2:
      var value = /** @type {!proto.BlockState.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BlockState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BlockState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BlockState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BlockState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockid();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.BlockState.BlockId = {
  UNKNOWN: 0,
  SHINJUKU_SAKURAJOSUI_UP: 10,
  SHINJUKU_SAKURAJOSUI_DOWN: 11,
  SAKURAJOSUI_CHOFU_UP: 20,
  SAKURAJOSUI_CHOFU_DOWN: 21,
  CHOFU_HACHIOJI_UP: 30,
  CHOFU_HACHIOJI_DOWN: 31,
  CHOFU_HASHIMOTO_UP: 40,
  CHOFU_HASHIMOTO_DOWN: 41,
  SHINJUKU_B1: 100,
  SHINJUKU_B2: 101,
  SAKURAJOSUI_B1: 110,
  SAKURAJOSUI_B2: 111,
  SAKURAJOSUI_B3: 120,
  SAKURAJOSUI_B4: 121,
  CHOFU_B1: 130,
  CHOFU_B2: 131,
  CHOFU_B3: 132,
  CHOFU_B4: 133,
  HASHIMOTO_B1: 140,
  HASHIMOTO_B2: 141,
  HACHIOJI_B1: 150,
  HACHIOJI_B2: 151
};

/**
 * @enum {number}
 */
proto.BlockState.State = {
  UNKNOWN: 0,
  OPEN: 1,
  CLOSE: 2
};

/**
 * optional BlockId blockId = 3;
 * @return {!proto.BlockState.BlockId}
 */
proto.BlockState.prototype.getBlockid = function() {
  return /** @type {!proto.BlockState.BlockId} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.BlockState.BlockId} value
 * @return {!proto.BlockState} returns this
 */
proto.BlockState.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional State state = 2;
 * @return {!proto.BlockState.State}
 */
proto.BlockState.prototype.getState = function() {
  return /** @type {!proto.BlockState.State} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.BlockState.State} value
 * @return {!proto.BlockState} returns this
 */
proto.BlockState.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


goog.object.extend(exports, proto);
