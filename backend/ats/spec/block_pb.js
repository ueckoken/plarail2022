// source: block.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Blocks', null, global);
goog.exportSymbol('proto.Blocks.BlockId', null, global);
goog.exportSymbol('proto.NotifyStateRequest', null, global);
goog.exportSymbol('proto.NotifyStateRequest.State', null, global);
goog.exportSymbol('proto.NotifyStateResponse', null, global);
goog.exportSymbol('proto.NotifyStateResponse.Response', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NotifyStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NotifyStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NotifyStateRequest.displayName = 'proto.NotifyStateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NotifyStateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NotifyStateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NotifyStateResponse.displayName = 'proto.NotifyStateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Blocks = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Blocks, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Blocks.displayName = 'proto.Blocks';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NotifyStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.NotifyStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NotifyStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NotifyStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 2, 0),
    block: (f = msg.getBlock()) && proto.Blocks.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NotifyStateRequest}
 */
proto.NotifyStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NotifyStateRequest;
  return proto.NotifyStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NotifyStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NotifyStateRequest}
 */
proto.NotifyStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!proto.NotifyStateRequest.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 3:
      var value = new proto.Blocks;
      reader.readMessage(value,proto.Blocks.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NotifyStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NotifyStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NotifyStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NotifyStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Blocks.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.NotifyStateRequest.State = {
  UNKNOWN: 0,
  OPEN: 1,
  CLOSE: 2
};

/**
 * optional State state = 2;
 * @return {!proto.NotifyStateRequest.State}
 */
proto.NotifyStateRequest.prototype.getState = function() {
  return /** @type {!proto.NotifyStateRequest.State} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.NotifyStateRequest.State} value
 * @return {!proto.NotifyStateRequest} returns this
 */
proto.NotifyStateRequest.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Blocks block = 3;
 * @return {?proto.Blocks}
 */
proto.NotifyStateRequest.prototype.getBlock = function() {
  return /** @type{?proto.Blocks} */ (
    jspb.Message.getWrapperField(this, proto.Blocks, 3));
};


/**
 * @param {?proto.Blocks|undefined} value
 * @return {!proto.NotifyStateRequest} returns this
*/
proto.NotifyStateRequest.prototype.setBlock = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.NotifyStateRequest} returns this
 */
proto.NotifyStateRequest.prototype.clearBlock = function() {
  return this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NotifyStateRequest.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NotifyStateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.NotifyStateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NotifyStateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NotifyStateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NotifyStateResponse}
 */
proto.NotifyStateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NotifyStateResponse;
  return proto.NotifyStateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NotifyStateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NotifyStateResponse}
 */
proto.NotifyStateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.NotifyStateResponse.Response} */ (reader.readEnum());
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NotifyStateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NotifyStateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NotifyStateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NotifyStateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.NotifyStateResponse.Response = {
  UNKNOWN: 0,
  SUCCESS: 1,
  FAILED: 2
};

/**
 * optional Response response = 1;
 * @return {!proto.NotifyStateResponse.Response}
 */
proto.NotifyStateResponse.prototype.getResponse = function() {
  return /** @type {!proto.NotifyStateResponse.Response} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.NotifyStateResponse.Response} value
 * @return {!proto.NotifyStateResponse} returns this
 */
proto.NotifyStateResponse.prototype.setResponse = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Blocks.prototype.toObject = function(opt_includeInstance) {
  return proto.Blocks.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Blocks} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Blocks.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Blocks}
 */
proto.Blocks.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Blocks;
  return proto.Blocks.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Blocks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Blocks}
 */
proto.Blocks.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {!proto.Blocks.BlockId} */ (reader.readEnum());
      msg.setBlockid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Blocks.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Blocks.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Blocks} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Blocks.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockid();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Blocks.BlockId = {
  UNKNOWN: 0,
  SHINJUKU_SAKURAJOSUI_UP: 10,
  SHINJUKU_SAKURAJOSUI_DOWN: 11,
  SAKURAJOSUI_CHOFU_UP: 20,
  SAKURAJOSUI_CHOFU_DOWN: 21,
  CHOFU_HACHIOJI_UP: 30,
  CHOFU_HACHIOJI_DOWN: 31,
  CHOFU_HASHIMOTO_UP: 40,
  CHOFU_HASHIMOTO_DOWN: 41,
  SHINJUKU_B1: 100,
  SHINJUKU_B2: 101,
  SAKURAJOSUI_B1: 110,
  SAKURAJOSUI_B2: 111,
  SAKURAJOSUI_B3: 120,
  SAKURAJOSUI_B4: 121,
  CHOFU_B1: 130,
  CHOFU_B2: 131,
  CHOFU_B3: 132,
  CHOFU_B4: 133,
  HASHIMOTO_B1: 140,
  HASHIMOTO_B2: 141,
  HACHIOJI_B1: 150,
  HACHIOJI_B2: 151
};

/**
 * optional BlockId blockId = 3;
 * @return {!proto.Blocks.BlockId}
 */
proto.Blocks.prototype.getBlockid = function() {
  return /** @type {!proto.Blocks.BlockId} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.Blocks.BlockId} value
 * @return {!proto.Blocks} returns this
 */
proto.Blocks.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


goog.object.extend(exports, proto);
