// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: proto/block.proto

package spec

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlockStateManagerClient is the client API for BlockStateManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockStateManagerClient interface {
	// UpdateBlockStateはサーバのBlockStateを変更します。
	UpdateBlockState(ctx context.Context, in *UpdateBlockStateRequest, opts ...grpc.CallOption) (*UpdateBlockStateResponse, error)
}

type blockStateManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockStateManagerClient(cc grpc.ClientConnInterface) BlockStateManagerClient {
	return &blockStateManagerClient{cc}
}

func (c *blockStateManagerClient) UpdateBlockState(ctx context.Context, in *UpdateBlockStateRequest, opts ...grpc.CallOption) (*UpdateBlockStateResponse, error) {
	out := new(UpdateBlockStateResponse)
	err := c.cc.Invoke(ctx, "/BlockStateManager/UpdateBlockState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockStateManagerServer is the server API for BlockStateManager service.
// All implementations must embed UnimplementedBlockStateManagerServer
// for forward compatibility
type BlockStateManagerServer interface {
	// UpdateBlockStateはサーバのBlockStateを変更します。
	UpdateBlockState(context.Context, *UpdateBlockStateRequest) (*UpdateBlockStateResponse, error)
	mustEmbedUnimplementedBlockStateManagerServer()
}

// UnimplementedBlockStateManagerServer must be embedded to have forward compatible implementations.
type UnimplementedBlockStateManagerServer struct {
}

func (UnimplementedBlockStateManagerServer) UpdateBlockState(context.Context, *UpdateBlockStateRequest) (*UpdateBlockStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlockState not implemented")
}
func (UnimplementedBlockStateManagerServer) mustEmbedUnimplementedBlockStateManagerServer() {}

// UnsafeBlockStateManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockStateManagerServer will
// result in compilation errors.
type UnsafeBlockStateManagerServer interface {
	mustEmbedUnimplementedBlockStateManagerServer()
}

func RegisterBlockStateManagerServer(s grpc.ServiceRegistrar, srv BlockStateManagerServer) {
	s.RegisterService(&BlockStateManager_ServiceDesc, srv)
}

func _BlockStateManager_UpdateBlockState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBlockStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockStateManagerServer).UpdateBlockState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlockStateManager/UpdateBlockState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockStateManagerServer).UpdateBlockState(ctx, req.(*UpdateBlockStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockStateManager_ServiceDesc is the grpc.ServiceDesc for BlockStateManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockStateManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BlockStateManager",
	HandlerType: (*BlockStateManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateBlockState",
			Handler:    _BlockStateManager_UpdateBlockState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/block.proto",
}

// BlockStateNotificationClient is the client API for BlockStateNotification service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockStateNotificationClient interface {
	NotifyBlockState(ctx context.Context, in *NotifyBlockStateRequest, opts ...grpc.CallOption) (*NotifyBlockStateResponse, error)
}

type blockStateNotificationClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockStateNotificationClient(cc grpc.ClientConnInterface) BlockStateNotificationClient {
	return &blockStateNotificationClient{cc}
}

func (c *blockStateNotificationClient) NotifyBlockState(ctx context.Context, in *NotifyBlockStateRequest, opts ...grpc.CallOption) (*NotifyBlockStateResponse, error) {
	out := new(NotifyBlockStateResponse)
	err := c.cc.Invoke(ctx, "/BlockStateNotification/NotifyBlockState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockStateNotificationServer is the server API for BlockStateNotification service.
// All implementations must embed UnimplementedBlockStateNotificationServer
// for forward compatibility
type BlockStateNotificationServer interface {
	NotifyBlockState(context.Context, *NotifyBlockStateRequest) (*NotifyBlockStateResponse, error)
	mustEmbedUnimplementedBlockStateNotificationServer()
}

// UnimplementedBlockStateNotificationServer must be embedded to have forward compatible implementations.
type UnimplementedBlockStateNotificationServer struct {
}

func (UnimplementedBlockStateNotificationServer) NotifyBlockState(context.Context, *NotifyBlockStateRequest) (*NotifyBlockStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyBlockState not implemented")
}
func (UnimplementedBlockStateNotificationServer) mustEmbedUnimplementedBlockStateNotificationServer() {
}

// UnsafeBlockStateNotificationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockStateNotificationServer will
// result in compilation errors.
type UnsafeBlockStateNotificationServer interface {
	mustEmbedUnimplementedBlockStateNotificationServer()
}

func RegisterBlockStateNotificationServer(s grpc.ServiceRegistrar, srv BlockStateNotificationServer) {
	s.RegisterService(&BlockStateNotification_ServiceDesc, srv)
}

func _BlockStateNotification_NotifyBlockState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyBlockStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockStateNotificationServer).NotifyBlockState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlockStateNotification/NotifyBlockState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockStateNotificationServer).NotifyBlockState(ctx, req.(*NotifyBlockStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockStateNotification_ServiceDesc is the grpc.ServiceDesc for BlockStateNotification service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockStateNotification_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BlockStateNotification",
	HandlerType: (*BlockStateNotificationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyBlockState",
			Handler:    _BlockStateNotification_NotifyBlockState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/block.proto",
}
