// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: proto/block.proto

package spec

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlockStateSyncClient is the client API for BlockStateSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockStateSyncClient interface {
	NotifyState(ctx context.Context, in *NotifyStateRequest, opts ...grpc.CallOption) (*NotifyStateResponse, error)
}

type blockStateSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockStateSyncClient(cc grpc.ClientConnInterface) BlockStateSyncClient {
	return &blockStateSyncClient{cc}
}

func (c *blockStateSyncClient) NotifyState(ctx context.Context, in *NotifyStateRequest, opts ...grpc.CallOption) (*NotifyStateResponse, error) {
	out := new(NotifyStateResponse)
	err := c.cc.Invoke(ctx, "/BlockStateSync/NotifyState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockStateSyncServer is the server API for BlockStateSync service.
// All implementations must embed UnimplementedBlockStateSyncServer
// for forward compatibility
type BlockStateSyncServer interface {
	NotifyState(context.Context, *NotifyStateRequest) (*NotifyStateResponse, error)
	mustEmbedUnimplementedBlockStateSyncServer()
}

// UnimplementedBlockStateSyncServer must be embedded to have forward compatible implementations.
type UnimplementedBlockStateSyncServer struct {
}

func (UnimplementedBlockStateSyncServer) NotifyState(context.Context, *NotifyStateRequest) (*NotifyStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyState not implemented")
}
func (UnimplementedBlockStateSyncServer) mustEmbedUnimplementedBlockStateSyncServer() {}

// UnsafeBlockStateSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockStateSyncServer will
// result in compilation errors.
type UnsafeBlockStateSyncServer interface {
	mustEmbedUnimplementedBlockStateSyncServer()
}

func RegisterBlockStateSyncServer(s grpc.ServiceRegistrar, srv BlockStateSyncServer) {
	s.RegisterService(&BlockStateSync_ServiceDesc, srv)
}

func _BlockStateSync_NotifyState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockStateSyncServer).NotifyState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlockStateSync/NotifyState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockStateSyncServer).NotifyState(ctx, req.(*NotifyStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockStateSync_ServiceDesc is the grpc.ServiceDesc for BlockStateSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockStateSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BlockStateSync",
	HandlerType: (*BlockStateSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyState",
			Handler:    _BlockStateSync_NotifyState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/block.proto",
}
