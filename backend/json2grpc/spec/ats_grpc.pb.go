// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: proto/ats.proto

package spec

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AtsClient is the client API for Ats service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AtsClient interface {
	SendStatus(ctx context.Context, in *SendStatusRequest, opts ...grpc.CallOption) (*SendStatusResponse, error)
}

type atsClient struct {
	cc grpc.ClientConnInterface
}

func NewAtsClient(cc grpc.ClientConnInterface) AtsClient {
	return &atsClient{cc}
}

func (c *atsClient) SendStatus(ctx context.Context, in *SendStatusRequest, opts ...grpc.CallOption) (*SendStatusResponse, error) {
	out := new(SendStatusResponse)
	err := c.cc.Invoke(ctx, "/Ats/SendStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AtsServer is the server API for Ats service.
// All implementations must embed UnimplementedAtsServer
// for forward compatibility
type AtsServer interface {
	SendStatus(context.Context, *SendStatusRequest) (*SendStatusResponse, error)
	mustEmbedUnimplementedAtsServer()
}

// UnimplementedAtsServer must be embedded to have forward compatible implementations.
type UnimplementedAtsServer struct {
}

func (UnimplementedAtsServer) SendStatus(context.Context, *SendStatusRequest) (*SendStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendStatus not implemented")
}
func (UnimplementedAtsServer) mustEmbedUnimplementedAtsServer() {}

// UnsafeAtsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AtsServer will
// result in compilation errors.
type UnsafeAtsServer interface {
	mustEmbedUnimplementedAtsServer()
}

func RegisterAtsServer(s grpc.ServiceRegistrar, srv AtsServer) {
	s.RegisterService(&Ats_ServiceDesc, srv)
}

func _Ats_SendStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtsServer).SendStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ats/SendStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtsServer).SendStatus(ctx, req.(*SendStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ats_ServiceDesc is the grpc.ServiceDesc for Ats service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ats_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Ats",
	HandlerType: (*AtsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendStatus",
			Handler:    _Ats_SendStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ats.proto",
}
