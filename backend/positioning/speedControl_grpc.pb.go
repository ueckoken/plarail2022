// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: proto/speedControl.proto

package spec

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpeedClient is the client API for Speed service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpeedClient interface {
	ControlSpeed(ctx context.Context, in *SendSpeed, opts ...grpc.CallOption) (*StatusCode, error)
}

type speedClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeedClient(cc grpc.ClientConnInterface) SpeedClient {
	return &speedClient{cc}
}

func (c *speedClient) ControlSpeed(ctx context.Context, in *SendSpeed, opts ...grpc.CallOption) (*StatusCode, error) {
	out := new(StatusCode)
	err := c.cc.Invoke(ctx, "/Speed/ControlSpeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpeedServer is the server API for Speed service.
// All implementations must embed UnimplementedSpeedServer
// for forward compatibility
type SpeedServer interface {
	ControlSpeed(context.Context, *SendSpeed) (*StatusCode, error)
	mustEmbedUnimplementedSpeedServer()
}

// UnimplementedSpeedServer must be embedded to have forward compatible implementations.
type UnimplementedSpeedServer struct {
}

func (UnimplementedSpeedServer) ControlSpeed(context.Context, *SendSpeed) (*StatusCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControlSpeed not implemented")
}
func (UnimplementedSpeedServer) mustEmbedUnimplementedSpeedServer() {}

// UnsafeSpeedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpeedServer will
// result in compilation errors.
type UnsafeSpeedServer interface {
	mustEmbedUnimplementedSpeedServer()
}

func RegisterSpeedServer(s grpc.ServiceRegistrar, srv SpeedServer) {
	s.RegisterService(&Speed_ServiceDesc, srv)
}

func _Speed_ControlSpeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSpeed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeedServer).ControlSpeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Speed/ControlSpeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeedServer).ControlSpeed(ctx, req.(*SendSpeed))
	}
	return interceptor(ctx, in, info, handler)
}

// Speed_ServiceDesc is the grpc.ServiceDesc for Speed service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Speed_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Speed",
	HandlerType: (*SpeedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ControlSpeed",
			Handler:    _Speed_ControlSpeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/speedControl.proto",
}
