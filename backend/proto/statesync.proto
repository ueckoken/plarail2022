syntax = "proto3";

option go_package = "./spec";

// StateManagerはexternalにて立ち上げます。ポイント情報などを管理します。
service StateManager{
  // UpdatePointStateはexternalへPointState更新要求を送る。
  rpc UpdatePointState(UpdatePointStateRequest) returns (UpdatePointStateResponse) {}
}

// Notificationはauto_operationなどで立ち上げます。StateManagerからポイント情報などの変更を受けとります。
service Notification {
  // NotifyPointStateはexternalからauto-operationやinternalへPointStateの更新情報を伝える。
  rpc NotifyPointState(NotifyPointStateRequest) returns (NotifyPointStateResponse) {}
}

enum StationId {
  stationid_unknown = 0;

  shinjuku_s1 = 2;
  shinjuku_s2 = 3;

  sakurajosui_p1 = 11;
  sakurajosui_p2 = 12;
  sakurajosui_s0 = 13;
  sakurajosui_s1 = 14;
  sakurajosui_s2 = 15;
  sakurajosui_s3 = 16;
  sakurajosui_s4 = 17;
  sakurajosui_s5 = 18;

  chofu_p1 = 21;
  chofu_s0 = 22;
  chofu_s1 = 23;
  chofu_s2 = 24;
  chofu_s3 = 25;
  chofu_s4 = 26;

  hashimoto_s1 = 31;
  hashimoto_s2 = 32;

  hachioji_s1 = 41;
  hachioji_s2 = 42;
}

message Station {
  StationId stationId = 1;
}

enum State {
  UNKNOWN = 0;
  ON = 1;
  OFF = 2;
}

message PointAndState {
  Station station = 1;
  State state = 2;
}

enum ResponseCode {
  responsecode_UNKNOWN = 0;
  responsecode_SUCCESS = 1;
  responsecode_FAILED = 2;
}

message UpdatePointStateRequest {
  PointAndState state = 1;
}

message UpdatePointStateResponse {
  ResponseCode response = 1;
}

message NotifyPointStateRequest{
  PointAndState state = 1;
}

message NotifyPointStateResponse {
  ResponseCode response = 1;
}

